# Project Configuration

## Framework
- This is a Remix project using the latest version (Remix Vite)
- Uses React Router v7.*.* (imports from 'react-router' instead of '@remix-run/react')
- Built with TypeScript

## Package Management
- Uses pnpm as the package manager
- Dependencies are managed through pnpm-lock.yaml

## Key Dependencies
- React Router 7 for routing (not @remix-run/react)
  - Uses the new Data APIs
  - Supports modern routing patterns
  - Enhanced type safety with TypeScript
- Drizzle ORM for database operations
- Tailwind CSS for styling
- shadcn/ui for UI components
- Lucide React for icons
- date-fns for date manipulation
- Zod for schema validation

## Project Structure
- `/app` - Main application code
  - `/routes` - Route components (uses React Router 7's route convention)
  - `/components` - Reusable UI components
  - `/lib` - Utility functions and hooks
  - `/services` - Business logic and services
  - `/src` - Additional source code
    - `/components` - Domain-specific components
    - `/providers` - React context providers
- `/server` - Server-side code
  - `/db` - Database schema and migrations
  - `/services` - Server-side services
  - `/dataServices` - Data access layer
  - `/auth` - Authentication strategies
- paths
  - "~/*": ["./app/*"],
  - "@/*": ["./*"]
    

## Authentication
- Uses custom authentication strategy
- Supports Google OAuth
- Role-based access control (RBAC)

## Database
- PostgreSQL with Drizzle ORM
- Uses migrations for schema changes
- Includes relations for:
  - Organizations
  - Users
  - Teams
  - Events
  - Roles
  - Permissions

## Important Notes
- All route imports should use 'react-router' instead of '@remix-run/react'
- Uses React Router 7's new Data APIs and patterns
- Uses modern React patterns (hooks, context, etc.)
- Implements a permission-based access control system
- Supports nested layouts and dynamic routes
- Uses TypeScript for type safety
- Implements responsive design with Tailwind CSS

## Development Workflow
- Uses Vite for development server
- TypeScript for type checking
- ESLint for code linting
- Prettier for code formatting