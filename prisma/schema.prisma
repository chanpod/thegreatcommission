generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id @default(auto()) @map("_id") @db.ObjectId
  email                 String               @unique
  firstName             String?
  lastName              String?
  googleId              String?              @unique
  Missionarys           Missionary[]
  churchOrganizations   ChurchOrganization[] @relation("UserChurch", fields: [churchOrganizationIds], references: [id])
  churchOrganizationIds String[]             @db.ObjectId
  adminOrganizations    ChurchOrganization[] @relation("AdminChurch", fields: [adminChurchIds], references: [id])
  adminChurchIds        String[]             @db.ObjectId
  ChurchOrganization    ChurchOrganization[]
  roles                 Role[]               @relation(fields: [roleIds], references: [id])
  roleIds               String[]             @db.ObjectId
  avatarUrl             String?
  volunteering          Missions[]           @relation(fields: [missionsIds], references: [id])
  missionsIds           String[]             @db.ObjectId
}

model Role {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  users     User[]   @relation(fields: [userIds], references: [id])
  userIds   String[] @db.ObjectId
}

type Location {
  lat Float
  lng Float
}

model Missions {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  title                String
  missionaries         Missionary[]        @relation(fields: [missionaryIds], references: [id])
  missionaryIds        String[]            @db.ObjectId
  volunteers           User[]              @relation(fields: [missionaryIds], references: [id])
  volunteerIds         String[]            @db.ObjectId
  ChurchOrganization   ChurchOrganization? @relation(fields: [churchOrganizationId], references: [id])
  churchOrganizationId String?             @db.ObjectId
  location             Location?
  beginDate            DateTime
  endDate              DateTime?
  description          String?
  sensitive            Boolean?            @default(false)
  volunteersNeeded     Int?
  investment           Int?
  fundingRaised        Int?
  photoUrls            String[]
}

model Missionary {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User?      @relation(fields: [userId], references: [id])
  firstName  String?
  middleName String?
  lastName   String?
  userId     String?    @db.ObjectId
  phone      String?
  email      String?
  address    String?
  city       String?
  state      String?
  zip        String?
  country    String?
  avatarUrl  String?
  missions   Missions[] @relation(fields: [missionIds], references: [id])
  missionIds String[]   @db.ObjectId
}

model ChurchOrganization {
  id                                String                          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                         DateTime                        @default(now())
  createdBy                         User                            @relation(fields: [createdById], references: [id])
  createdById                       String                          @db.ObjectId
  updatedAt                         DateTime                        @updatedAt
  name                              String
  street                            String?
  city                              String?
  state                             String?
  zip                               String?
  description                       String?
  churchBannerUrl                   String?
  mainChurchWebsite                 String?
  email                             String?
  phone                             String?
  parentOrganizationId              String?                         @db.ObjectId
  parentOrganization                ChurchOrganization?             @relation("OrgChurch", fields: [parentOrganizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  associations                      ChurchOrganization[]            @relation("OrgChurch")
  members                           User[]                          @relation("UserChurch", fields: [mebersIds], references: [id])
  mebersIds                         String[]                        @db.ObjectId
  admins                            User[]                          @relation("AdminChurch", fields: [adminsIds], references: [id])
  adminsIds                         String[]                        @db.ObjectId
  missions                          Missions[]
  organizationMembershipSubmissions OrganizationMemberShipRequest[] @relation("requesting")
  organizationMembershipRequest     OrganizationMemberShipRequest[] @relation("request")
  avatarUrl                         String?
}

model OrganizationMemberShipRequest {
  id                             String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                      DateTime           @default(now())
  updatedAt                      DateTime           @updatedAt
  requestingChurchOrganization   ChurchOrganization @relation("requesting", fields: [requestingChurchOrganizationId], references: [id])
  requestingChurchOrganizationId String             @db.ObjectId
  parentOrganization             ChurchOrganization @relation("request", fields: [parentOrganizationId], references: [id])
  parentOrganizationId           String             @db.ObjectId
  status                         String             @default("pending")
  type                           String             @default("organization")

  @@unique([requestingChurchOrganizationId, parentOrganizationId])
}
